
# This file was *autogenerated* from the file solver_OneTimePad.sage
from trmr import *

from sage.all import *
#from trmr import *

def ntopoly(X, npoly):
    return sum(c*X**e for e, c in enumerate(Integer(npoly).bits()))

def polyton(poly):
    if not hasattr(poly, 'list'):
        poly = poly.polynomial()
    a = poly.list()
    return sum(int(a[i])*(_sage_const_1  << i) for i in xrange(len(a)))

X = GF(_sage_const_2 ).polynomial_ring().gen()
P = 0x10000000000000000000000000000000000000000000000000000000000000425L #trmr:
PX = ntopoly(X, P)
print PX
print polyton(PX)

F = GF(_sage_const_2 )
print F

R = PolynomialRing( F, name='X' )
print R

G = GL(_sage_const_3 ,F)
print G.order()

E = EllipticCurve( GF(_sage_const_2 **_sage_const_53 ), [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ] )
print "ORDER %s for %s" % ( E.order().factor(), E )

